=======
Package
=======

package foobar

---

(source_file
  (package_declaration
    (package_identifier)))

=========
Empty component without arguments
=========

package foobar

templ Foo() {}

---

(source_file
  (package_declaration
    (package_identifier))
  (component_declaration
    (component_identifier)
    (parameter_list)))

=========
Empty component with arguments
=========

package foobar

templ Foo(name string, foo int, bar []string) {}

---

(source_file
  (package_declaration
    (package_identifier))
  (component_declaration
    name: (component_identifier)
    (parameter_list
      (parameter_declaration
        name: (parameter_identifier)
        type: (parameter_type))
      (parameter_declaration
        name: (parameter_identifier)
        type: (parameter_type))
      (parameter_declaration
        name: (parameter_identifier)
        type: (parameter_type)))))

=========
Component with a single element taking a parameter
=========

package foobar

templ Foo(text string) {
  <button class="button">FOO</button>
}

---

(source_file
  (package_declaration
    (package_identifier))
  (component_declaration
    name: (component_identifier)
    (parameter_list
      (parameter_declaration
        name: (parameter_identifier)
        type: (parameter_type)))
    (element
      (tag_start
        name: (element_identifier)
        (attribute
          name: (attribute_name)
          value: (attribute_value)))
      (text)
      (tag_end
        name: (element_identifier)))))

====
Component with multiple elements and an expression
====

package testhtml

templ BasicTemplate(url string) {
  <div>
    <a href={ templ.URL(url) } class="red">text</a>
  </div>
  <hr/>
}

---

(source_file
  (package_declaration
    (package_identifier))
  (component_declaration
    name: (component_identifier)
    (parameter_list
      (parameter_declaration
        name: (parameter_identifier)
        type: (parameter_type)))
    (element
      (tag_start
        name: (element_identifier))
      (element
        (tag_start
          name: (element_identifier)
          (attribute
            name: (attribute_name)
            value: (expression))
          (attribute
            name: (attribute_name)
            value: (attribute_value)))
        (text)
        (tag_end
          name: (element_identifier)))
      (tag_end
        name: (element_identifier)))
    (element
      (self_closing_tag
        name: (element_identifier)))))
